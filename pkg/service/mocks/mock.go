// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	user_segmentation "user_segmentation"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user user_segmentation.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// UserExists mocks base method.
func (m *MockAuthorization) UserExists(user_id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", user_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockAuthorizationMockRecorder) UserExists(user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockAuthorization)(nil).UserExists), user_id)
}

// MockSegment is a mock of Segment interface.
type MockSegment struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentMockRecorder
}

// MockSegmentMockRecorder is the mock recorder for MockSegment.
type MockSegmentMockRecorder struct {
	mock *MockSegment
}

// NewMockSegment creates a new mock instance.
func NewMockSegment(ctrl *gomock.Controller) *MockSegment {
	mock := &MockSegment{ctrl: ctrl}
	mock.recorder = &MockSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegment) EXPECT() *MockSegmentMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSegment) Create(segment user_segmentation.Segment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", segment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSegmentMockRecorder) Create(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSegment)(nil).Create), segment)
}

// Delete mocks base method.
func (m *MockSegment) Delete(slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSegmentMockRecorder) Delete(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSegment)(nil).Delete), slug)
}

// Exists mocks base method.
func (m *MockSegment) Exists(slug string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", slug)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockSegmentMockRecorder) Exists(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSegment)(nil).Exists), slug)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// AddToSegment mocks base method.
func (m *MockUser) AddToSegment(user_id int, slug string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToSegment", user_id, slug)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToSegment indicates an expected call of AddToSegment.
func (mr *MockUserMockRecorder) AddToSegment(user_id, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToSegment", reflect.TypeOf((*MockUser)(nil).AddToSegment), user_id, slug)
}

// DeleteSegmentRelation mocks base method.
func (m *MockUser) DeleteSegmentRelation(user_id int, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegmentRelation", user_id, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegmentRelation indicates an expected call of DeleteSegmentRelation.
func (mr *MockUserMockRecorder) DeleteSegmentRelation(user_id, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegmentRelation", reflect.TypeOf((*MockUser)(nil).DeleteSegmentRelation), user_id, slug)
}

// GetActiveSegment mocks base method.
func (m *MockUser) GetActiveSegment(user_id int) ([]user_segmentation.UserSegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSegment", user_id)
	ret0, _ := ret[0].([]user_segmentation.UserSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSegment indicates an expected call of GetActiveSegment.
func (mr *MockUserMockRecorder) GetActiveSegment(user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSegment", reflect.TypeOf((*MockUser)(nil).GetActiveSegment), user_id)
}

// SegmentRelationExists mocks base method.
func (m *MockUser) SegmentRelationExists(user_id int, slug string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SegmentRelationExists", user_id, slug)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SegmentRelationExists indicates an expected call of SegmentRelationExists.
func (mr *MockUserMockRecorder) SegmentRelationExists(user_id, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SegmentRelationExists", reflect.TypeOf((*MockUser)(nil).SegmentRelationExists), user_id, slug)
}
